---
layout:       post
title:        "Git Tools"
subtitle:     "git usage"
date:         2018-07-12 21:52:00
author:       "G.J.先生"
header-img:   "img/in-post/2018.07/12/github.png"
catalog:      true
tags:
    - github
    - git
---
*****
>Abstract: "该教程主要是介绍git工具的一些基本的用法。"<br>                                                                                                                                                                             <br /> 

----------
##### Usage1:基本的用法 
1.新建README.md文件
```bash
echo "# Ridgeback" >> README.md 
```
2.创建标准仓库，这个步骤会在根目录下创建一个隐藏的.git
```bash
git init
```
3.添加文件追踪(.表示添加这个目录下的所有文件)
```bash
git add .  
```
4.查看仓库状态
```git
git status
```
5.提交代码
```bash
git commit -m "first commit"
```
>其中first commit为说明文字，可以改为其他的

6.添加远程仓库
```bash
git remote add origin <你项目仓库链接>
```
7.推送代码
```bash
git push -u origin master
```
>其中master为分支名字，可以改为其他的，第二次推送代码的时候，不用-u,即

```bash
git push origin master
```

*****
##### Usage2:分支改名
1.如果对于分支不是当前分支
```git
git branch -m 原名 新
```
2.如果是当前，那么可以使用加上新名字
```bash
git branch -m 原名 
```

*****
##### Usage3:删除本地分支和远程分支
1.查看已有的本地及远程分支
```git
git branch -a
```
2.删除远程分支
```git
git push origin --delete <分支名>
```
>如果是master分支，在github上将master分支设置成不是default的分支才可以删除

删除后，可再次查看分支情况
```git
git branch -a
```
3.删除本地分支
```git
git branch -d <分支名>
```
若分支有修改还未合并，会提示你还没合并，强行删除本地分支：
```git
git branch -D <分支名>
```
如果是master分支，则应该先切换到新分支才可以删除master分支
```git
git checkout <new_branch>
git branch -d master
```
删除后，可再次查看分支情况
```git
git branch -a
```

*****
##### Usage4:用git下载文件
1.下载整个项目
```bash
git clone <项目的地址>
```
2.下载单一的文件<br>
用trunk代替链接中的tree/master
```bash
svn co <修改后的项目地址>
#例如要下载QQ_wechat下的icon，把trunk代替链接中的tree/master
svn co https://github.com/GJXS1980/QQ_wechat/trunk/wechat/icon
```

##### .gitignore的使用
<p style="line-height: 1.75em;text-align: center;"><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">— &nbsp;忽略文件的</span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;"></span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">的<span style="font-size: 15px;">原则</span>&nbsp;—</span></strong></p>
<lu>
    <li> 忽略操作系统自动生成的文件，比如缩略图等； </li>
    <li> 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； </li>
    <li> 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件 </li>
</lu>
<p style="line-height: 1.75em;text-align: center;"><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">— &nbsp;使用</span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;"></span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">的<span style="font-size: 15px;">方法</span>&nbsp;—</span></strong></p>
首先，在你的工作区新建一个名称为.gitignore的文件。<br>
然后，把要忽略的文件名填进去，Git就会自动忽略这些文件。<br>
例子:
```git
*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

```
<p style="line-height: 1.75em;text-align: center;"><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">— &nbsp;查看gitignore</span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;"></span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">的<span style="font-size: 15px;">规则</span>&nbsp;—</span></strong></p>
如果你发现.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
```git
git check-ignore -v <your_path>
```
<p style="line-height: 1.75em;text-align: center;"><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">— &nbsp;.gitignore规则</span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;"></span></strong><strong style="font-size: 16px;text-align: center;white-space: normal;color: rgb(255, 255, 255);"><span style="background-color: rgb(54, 81, 115);text-align: justify;">的<span style="font-size: 15px;">不生效的解决办法</span>&nbsp;—</span></strong></p>

把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：
```git
git rm -r --cached .
git add .
git commit -m 'update .gitignore'
```







