---
layout:       post
title:        "ROS NOTE 4"
subtitle:     "URDF机器人建模"
date:         2018-08-24 08:45:00
author:       "G.J.先生"
header-img:   "img/in-post/2018.08/22/22.jpg"
catalog:      true
tags:
    - ROS
    - 深蓝学院课程笔记
    - URDF
---
*****
>Abstract: "URDF机器人描述文件的使用及URDF模型文件的优化xacro文件的基本用法。"<br>                                                                                                                                                            <br /> 

----------
*************************
### URDF机器人建模
##### URDF文件概述
URDF：URDF(<code>Unified Robot Description Format</code>)为统一的机器人描述格式，是ROS中一个非常重要的机器人模型描述格式。ROS可以解析文件中使用XML格式描述的机器人模型，同时提供URDF文件的C++解析器。<br>

##### <link\>标签
<link\>标签：描述机器人某个刚体部分的外观和物理属性，例如：尺寸(size)、颜色(color)、形状(shape)、惯性矩阵(inertial matrix)、碰撞参数(collision properties)等。<br>
| <visual\> | 描述机器人link部分的外观参数 | 
| <inertial\> | 描述link的惯性参数 | 
| <collision> | 描述link的碰撞属性 | 

```xml
<link name="<link name>">
    <inertial> …… </inertial>
    <visual> …… </visual>
    <collision> …… </collision>
</link>
```
结构图如下：
<img src="http://pdpv2lxdq.bkt.clouddn.com/link.png" alt="URDF机器人建模"><i><p align="right" style="color: gray; font-size:3px;">Source: <a  target="_blank" rel="external">ROS理论与实践_3:URDF机器人建模</a></p></i></p>

##### <joint\>标签
<joint\>标签:描述机器人关节的运动学和动力学属性，包括关节运动的位置和速度限制。根据关节运动形式，可以将其分为六种类型：<br>
| 关节类型 | 描述 | 
| -  | :-: |
| continuous | 旋转关节，可以围绕单轴无限旋转 | 
| revolute | 旋转关节，类似continuous，但有旋转的角度极限 | 
| prismatic | 滑动关节，沿某一轴线移动的关节，带有位置极限 | 
| planar | 平面关节，允许在平面正交方向上平移或者旋转 | 
| floating | 浮动关节，允许进行平移、旋转运动 | 
| fixed | 固定关节，不允许运动的特殊关节 | 

例子如下：<br>
```xml
<joint name="<name of the joint>" type="<joint type>">
    <parent link="parent_link"/>
    <child link="child_link"/>
    <calibration …… />
    <dynamics damping …… />
    <limit effort …… />
    ……
</joint>
```
<ul>
<li> <code>calibration</code>:关节的参考位置，用来校准关节的绝对位置；</li>
<li> <code>dynamics</code>:描述关节的物理属性，例如阻尼值、物理静摩擦力等，经常在动力学仿真中用到； </li>
<li> <code>limit</code>：描述运动的一些极限值，包括关节运动的上下限位置、速度限制、力矩限制等； </li>
<li> <code>mimic</code>:描述该关节与已有关节的关系； </li>
<li> <code>safety_controller</code>：描述安全控制器参数。 </li>
</ul>
结构图如下：
![]()
<img src="http://pdpv2lxdq.bkt.clouddn.com/link.png" alt="URDF机器人建模"><i><p align="right" style="color: gray; font-size:3px;">Source: <a  target="_blank" rel="external">ROS理论与实践_3:URDF机器人建模</a></p></i></p>

##### <robot\>标签
<robot\>标签:是机器人模型的最顶层标签，<link\>和<joint\>标签都必须包括在<robot\>标签内，一个完整的机器人模型就是由一系列<link\>和<joint\>组成。<br>
例子如下：<br>
```xml
<robot name="<name of the robot>">
    <link>……</link>
    <link>……</link>

    <joint>……</joint>
    <joint>……</joint>
</robot>
```
结构图如下：
<img src="http://pdpv2lxdq.bkt.clouddn.com/robot.png" alt="URDF机器人建模"><i><p align="right" style="color: gray; font-size:3px;">Source: <a  target="_blank" rel="external">ROS理论与实践_3:URDF机器人建模</a></p></i></p>

##### 创建机器人建模功能包
<p> 创建一个机器人建模功能包:</p>
```bash
catkin_create_pkg mbot_description urdf xacro
```
<ul>
<li> <code>urdf</code>:存放机器人模型的URDF或xacro文件；</li>
<li> <code>meshes</code>:放置URDF中引用的模型渲染文件； </li>
<li> <code>launch</code>：保存相关启动文件； </li>
<li> <code>config</code>:保存rviz的配置文件。 </li>
</ul>
<p>创建一个launch文件(display_mbot_base_urdf.launch)：</p>
```xml
<launch>
    <param name="robot_description" textfile="$(find mbot_description)/urdf/mbot_base.urdf" />

    <!-- 设置GUI参数，显示关节控制插件 -->
    <param name="use_gui" value="true"/>
    
    <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    
    <!-- 运行robot_state_publisher节点，发布tf  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
    
    <!-- 运行rviz可视化界面 -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mbot_description)/config/mbot_urdf.rviz" required="true" />
</launch>
```
<ul>
<li> <code>joint_state_publisher</code>:发布每个joint（除fixed类型）的状态，而且可以通过UI界面对joint金星控制；</li>
<li> <code>robot_state_publisher</code>:将机器人各个links、joints之间的关系，通过TF的形式，整理成三维姿态信息发布。 </li>
</ul>

<p>创建一个urdf文件(mbot_base.urdf)：</p>
```xml
<?xml version="1.0" ?>
<robot name="mbot">

    <link name="base_link">
        <visual>
            <origin xyz=" 0 0 0" rpy="0 0 0" />
            <geometry>
                <cylinder length="0.16" radius="0.20"/>
            </geometry>
            <material name="yellow">
                <color rgba="1 0.4 0 1"/>
            </material>
        </visual>
    </link>

    <joint name="left_wheel_joint" type="continuous">
        <origin xyz="0 0.19 -0.05" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="left_wheel_link"/>
        <axis xyz="0 1 0"/>
    </joint>

    <link name="left_wheel_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.5707 0 0" />
            <geometry>
                <cylinder radius="0.06" length = "0.025"/>
            </geometry>
            <material name="white">
                <color rgba="1 1 1 0.9"/>
            </material>
        </visual>
    </link>

    <joint name="right_wheel_joint" type="continuous">
        <origin xyz="0 -0.19 -0.05" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="right_wheel_link"/>
        <axis xyz="0 1 0"/>
    </joint>

    <link name="right_wheel_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.5707 0 0" />
            <geometry>
                <cylinder radius="0.06" length = "0.025"/>
            </geometry>
            <material name="white">
                <color rgba="1 1 1 0.9"/>
            </material>
        </visual>
    </link>

    <joint name="front_caster_joint" type="continuous">
        <origin xyz="0.18 0 -0.095" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="front_caster_link"/>
        <axis xyz="0 1 0"/>
    </joint>

    <link name="front_caster_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="0.015" />
            </geometry>
            <material name="black">
                <color rgba="0 0 0 0.95"/>
            </material>
        </visual>
    </link>

    <joint name="back_caster_joint" type="continuous">
        <origin xyz="-0.18 0 -0.095" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="back_caster_link"/>
        <axis xyz="0 1 0"/>
    </joint>

    <link name="back_caster_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="0.015" />
            </geometry>
            <material name="black">
                <color rgba="0 0 0 0.95"/>
            </material>
        </visual>
    </link>

</robot>
```
<p>检查URDF模型整体结构</p>
```bash
urdf_to_graphiz mbot_base.urdf

```

<p>URDF建模存在的问题</p>
<ul>
<li> 模型冗长，重复内容过多；</li>
<li> 参数修改麻烦，不便于二次开发： </li>
<li> 没有参数计算的功能； </li>
<li> …… </li>
</ul>

*************************
### 优化URDF模型--xacro模型文件
##### xacro模型文件特点概述
<p>精简模型代码</p>
<ul>
<li> 创建宏定义</li>
<li> 文件包含 </li>
</ul>
<p>提供可编程接口</p>
<ul>
<li> 常量</li>
<li> 变量 </li>
<li> 数学计算</li>
<li> 条件语句 </li>
</ul>

##### 常量定义
<p>常量定义</p>
```xml
<xacro:property name="M_PI" value="3.14159"/>
```
<p>常量使用</p>
```xml
<origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
```
>用法：${name} <br>

##### 数学计算
```xml
<origin xyz="0 ${(motor_length+wheel_length)/2} 0" rpy="0 0 0"/>
```
>注意：所有数学运算都会转换成浮点数进行，以保证运算精度。

##### 宏定义
<p>宏定义</p>
```xml
<xacro:macro name="name" params="A B C">
    ……
</xacro:macro>
```
<p>宏调用</p>
```xml
<name A="A_value" B="B_value" C="C_value" />
```

##### 文件包含
```xml
<xacro:include filename="$(find mbot_description)/urdf/xacro/mbot_base.xacro" />
```

##### 模型显示
<p>方法一：将xacro文件转换成URDF文件后显示</p>
```bash
rosrun xacro xacro.py mbot.xacro > mbot.urdf
```

<p>方法二：直接调用xacro文件解析器</p>
```xml
<arg name="model" default="$(find xacro)/xacro --inorder `$(find mbot_description)/urdf/xacro/mbot.xacro" />

<param name="robot_description" command="$(arg model)" />

```

##### 实例
<p>(mbot.xacro)</p>
```xml
<?xml version="1.0"?>
<robot name="arm" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="$(find mbot_description)/urdf/xacro/mbot_base.xacro" />

    <mbot_base/>

</robot>
```

<p>(mbot_base.xacro)</p>
```xml
<?xml version="1.0"?>
<robot name="mbot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- PROPERTY LIST -->
    <xacro:property name="M_PI" value="3.1415926"/>
    <xacro:property name="base_radius" value="0.20"/>
    <xacro:property name="base_length" value="0.16"/>

    <xacro:property name="wheel_radius" value="0.06"/>
    <xacro:property name="wheel_length" value="0.025"/>
    <xacro:property name="wheel_joint_y" value="0.19"/>
    <xacro:property name="wheel_joint_z" value="0.05"/>

    <xacro:property name="caster_radius" value="0.015"/> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) -->
    <xacro:property name="caster_joint_x" value="0.18"/>

    <!-- Defining the colors used in this robot -->
    <material name="yellow">
        <color rgba="1 0.4 0 1"/>
    </material>
    <material name="black">
        <color rgba="0 0 0 0.95"/>
    </material>
    <material name="gray">
        <color rgba="0.75 0.75 0.75 1"/>
    </material>
    
    <!-- Macro for robot wheel -->
    <xacro:macro name="wheel" params="prefix reflect">
        <joint name="${prefix}_wheel_joint" type="continuous">
            <origin xyz="0 ${reflect*wheel_joint_y} ${-wheel_joint_z}" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="${prefix}_wheel_link"/>
            <axis xyz="0 1 0"/>
        </joint>

        <link name="${prefix}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
                </geometry>
                <material name="gray" />
            </visual>
        </link>
    </xacro:macro>

    <!-- Macro for robot caster -->
    <xacro:macro name="caster" params="prefix reflect">
        <joint name="${prefix}_caster_joint" type="continuous">
            <origin xyz="${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="${prefix}_caster_link"/>
            <axis xyz="0 1 0"/>
        </joint>

        <link name="${prefix}_caster_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}" />
                </geometry>
                <material name="black" />
            </visual>
        </link>
    </xacro:macro>

    <xacro:macro name="mbot_base">
        <link name="base_footprint">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <box size="0.001 0.001 0.001" />
                </geometry>
            </visual>
        </link>

        <joint name="base_footprint_joint" type="fixed">
            <origin xyz="0 0 ${base_length/2 + caster_radius*2}" rpy="0 0 0" />        
            <parent link="base_footprint"/>
            <child link="base_link" />
        </joint>

        <link name="base_link">
            <visual>
                <origin xyz=" 0 0 0" rpy="0 0 0" />
                <geometry>
                    <cylinder length="${base_length}" radius="${base_radius}"/>
                </geometry>
                <material name="yellow" />
            </visual>
        </link>

        <wheel prefix="left" reflect="-1"/>
        <wheel prefix="right" reflect="1"/>

        <caster prefix="front" reflect="-1"/>
        <caster prefix="back" reflect="1"/>
    </xacro:macro>
</robot>
```

*************************