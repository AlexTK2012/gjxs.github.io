---
layout:       post
title:        "ROS NOTE 6"
subtitle:     "Gazebo物理仿真环境搭建"
date:         2018-08-27 12:50:00
author:       "G.J.先生"
header-img:   "img/in-post/2018.08/27/robot1.jpg"
catalog:      true
tags:
    - ROS
    - 深蓝学院
    - 课程笔记
    - rviz
    - Gazebo
    - ros control
---
*****
>Abstract: "ROS中的ros_control功能包的介绍及Gazebo物理仿真环境搭建。"<br>                                                                                                                                                                   <br /> 

----------
*************************
### 前言--ros_control
##### ros_control的介绍
<ul>
<li> ROS为开发者提供的机器人控制中间件</li>
<li> 包括一系列控制器接口、传动装置接口、硬件接口、控制器工具箱等等 </li>
<li> 可以帮助机器人应用功能包快速落地，提高开发效率</li>
</ul>
<p>ros_control的总体框架</p>
<img src="http://pdpv2lxdq.bkt.clouddn.com/ros_control1.png" alt="ros_control的总体框架"><i>Source: <a  target="_blank" rel="external">ROS理论与实践_4:机器人仿真</a></i>
<p>ros_control的控制器数据流图</p>
<img src="http://pdpv2lxdq.bkt.clouddn.com/ros_control2.png" alt="控制器数据流图"><i>Source: <a  target="_blank" rel="external">ROS理论与实践_4:机器人仿真</a></i>
<ul>
<li> <code>控制器管理器</code>:提供一种通用的接口来管理不同的控制器。</li>
<li> <code>控制器</code>:读取硬件状态，发布控制命令，完成每个joint的控制。 </li>
<li> <code>硬件资源</code>:为上下两层提供硬件资源的接口。 </li>
<li> <code>机器人硬件抽象</code>:机器人硬件抽象和硬件资源直接打交道，通过write和read方法完成硬件操作。 </li>
<li> <code>真实机器人</code>:执行接收到的命令。 </li>
</ul>
<p>ros_control的控制器</p>
<ul>
<li> <code>joint_effort_controller</code></li>
<li> <code>joint_state_controller</code></li>
<li> <code>joint_position_controller</code></li>
<li> <code>joint_velocity_controller</code></li>
</ul>
<img src="http://pdpv2lxdq.bkt.clouddn.com/ros_control4.png" alt="ros_control的控制器"><i>Source: <a  target="_blank" rel="external">ROS理论与实践_4:机器人仿真</a></i>

*************************
### Gazebo物理仿真环境的搭建
##### Gazebo+ros_control框架
<img src="http://pdpv2lxdq.bkt.clouddn.com/ros_control3.png" alt="Gazebo+ros_control框架"><i>Source: <a  target="_blank" rel="external">ROS理论与实践_4:机器人仿真</a></i>
##### 仿真步骤
###### 配置机器人模型
<p>第一步：为link添加惯性参数和碰撞属性</p>
```xml
    <!-- Macro for inertia matrix -->
    <xacro:macro name="sphere_inertial_matrix" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${2*m*r*r/5}" ixy="0" ixz="0"
                iyy="${2*m*r*r/5}" iyz="0" 
                izz="${2*m*r*r/5}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial_matrix" params="m r h">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
                iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
                izz="${m*r*r/2}" /> 
        </inertial>
    </xacro:macro>

            <collision>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length = "${wheel_length}"/>
                </geometry>
            </collision>
            <cylinder_inertial_matrix  m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
```
<ul>
<li> <code>collision</code>：碰撞属性</li>
<li> <code>cylinder_inertial_matrix</code>：惯性矩阵（如果是一个圆柱体，输入质量、半径和高度）</li>
</ul>

<p>第二步：为link添加gazebo标签</p>
```xml
        <gazebo reference="${prefix}_wheel_link">
            <material>Gazebo/Gray</material>
        </gazebo>

        <gazebo reference="${prefix}_caster_link">
            <material>Gazebo/Black</material>
        </gazebo>

        <gazebo reference="base_footprint">
            <turnGravityOff>false</turnGravityOff>
        </gazebo>

        <gazebo reference="base_link">
            <material>Gazebo/Blue</material>
        </gazebo>
```
>rviz下的颜色跟gazebo下的颜色用法不一样

<ul>
<li> <code>material</code>：gazebo下的颜色</li>
<li> <code>turnGravityOff</code>：重力属性</li>
</ul>

<p>第三步：为joint添加传动装置</p>
```xml
        <!-- Transmission is important to link the joints and the controller -->
        <transmission name="${prefix}_wheel_joint_trans">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${prefix}_wheel_joint" >
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="${prefix}_wheel_joint_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
```
<ul>

<li> <code>hardware_interface/VelocityJointInterface</code>：速度控制接口，相当于电机</li>
<li> <code>mechanicalReduction</code>：电机的减速比</li>
</ul>

<p>第四步：添加gazebo控制器插件</p>
gazebo控制器插件的作用相当于驱动板
```xml
        <!-- controller -->
        <gazebo>
            <plugin name="differential_drive_controller" 
                    filename="libgazebo_ros_diff_drive.so">
                <rosDebugLevel>Debug</rosDebugLevel>
                <publishWheelTF>true</publishWheelTF>
                <robotNamespace>/</robotNamespace>
                <publishTf>1</publishTf>
                <publishWheelJointState>true</publishWheelJointState>
                <alwaysOn>true</alwaysOn>
                <updateRate>100.0</updateRate>
                <legacyMode>true</legacyMode>
                <leftJoint>left_wheel_joint</leftJoint>
                <rightJoint>right_wheel_joint</rightJoint>
                <wheelSeparation>${wheel_joint_y*2}</wheelSeparation>
                <wheelDiameter>${2*wheel_radius}</wheelDiameter>
                <broadcastTF>1</broadcastTF>
                <wheelTorque>30</wheelTorque>
                <wheelAcceleration>1.8</wheelAcceleration>
                <commandTopic>cmd_vel</commandTopic>
                <odometryFrame>odom</odometryFrame> 
                <odometryTopic>odom</odometryTopic> 
                <robotBaseFrame>base_footprint</robotBaseFrame>
            </plugin>
        </gazebo> 
```
<ul>
<li> <code>differential_drive_controller </code>：差速控制插件</li>  
<li> <code>robotNamespace</code>：机器人的命名空间</li>
<li> <code>leftJoint和rightJoint</code>：左右轮转动的关节</li>
<li> <code>wheelSeparation和wheelDiameter</code>：机器人模型的相关尺寸，在计算差速参数时需要用到</li>
<li> <code>commandTopic</code>：控制器订阅的速度控制指令，生成全局命名时需要结合robotNamespace中设置的命名空间</li>
<li> <code>odometryFrame</code>：里程计数据的参考坐标系，ROS中一般命名为odom</li>

</ul>

###### 创建仿真环境
<p>在gazebo中加载机器人模型</p>
例如(view_mbot_gazebo_empty_world.launch):
```xml
<launch>
    <!-- 设置launch文件的参数 -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- 运行gazebo仿真环境 -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- 加载机器人模型描述参数 -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mbot_description)/urdf/xacro/gazebo/mbot_gazebo.xacro'" /> 

    <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node> 

    <!-- 运行robot_state_publisher节点，发布tf  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  output="screen" >
        <param name="publish_frequency" type="double" value="50.0" />
    </node>

    <!-- 在gazebo中加载机器人模型-->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model mrobot -param robot_description"/> 

</launch>
```
>其中最主要的是加载机器人模型描述参数和在gazebo中加载机器人模型

<p>创建仿真环境</p>
<li> 第一种方法：直接添加环境模型 </li>
>为保证模型顺利加载,建议提前将[模型文件库](https://bitbucket.org/osrf/gazebo_models/downloads/)下载并放置到<code>~/.gazebo/models </code>下

<li> 第二种方法：使用Building Editor </li>
点击edit下的Building Editor开始绘物理环境<br>
<p>开始仿真</p>
<li> 启动仿真环境 </li>
```bash
roslaunch mbot_gazebo view_mbot_gazebo_play_ground.launch
```
<li> 启动键盘控制 </li>
```bash
roslaunch mbot_teleop mbot_teleop.launch
```

###### 传感器仿真
<p>摄像头仿真</p>
实例(camera_gazebo.xacro)如下:
```xml
<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="camera">

    <xacro:macro name="usb_camera" params="prefix:=camera">
        <!-- Create laser reference frame -->
        <link name="${prefix}_link">
            <inertial>
                <mass value="0.1" />
                <origin xyz="0 0 0" />
                <inertia ixx="0.01" ixy="0.0" ixz="0.0"
                         iyy="0.01" iyz="0.0"
                         izz="0.01" />
            </inertial>

            <visual>
                <origin xyz=" 0 0 0 " rpy="0 0 0" />
                <geometry>
                    <box size="0.01 0.04 0.04" />
                </geometry>
                <material name="black"/>
            </visual>

            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
                <geometry>
                    <box size="0.01 0.04 0.04" />
                </geometry>
            </collision>
        </link>
        <gazebo reference="${prefix}_link">
            <material>Gazebo/Black</material>
        </gazebo>

        <gazebo reference="${prefix}_link">
            <sensor type="camera" name="camera_node">
                <update_rate>30.0</update_rate>
                <camera name="head">
                    <horizontal_fov>1.3962634</horizontal_fov>
                    <image>
                        <width>1280</width>
                        <height>720</height>
                        <format>R8G8B8</format>
                    </image>
                    <clip>
                        <near>0.02</near>
                        <far>300</far>
                    </clip>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.007</stddev>
                    </noise>
                </camera>
                <plugin name="gazebo_camera" filename="libgazebo_ros_camera.so">
                    <alwaysOn>true</alwaysOn>
                    <updateRate>0.0</updateRate>
                    <cameraName>/camera</cameraName>
                    <imageTopicName>image_raw</imageTopicName>
                    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                    <frameName>camera_link</frameName>
                    <hackBaseline>0.07</hackBaseline>
                    <distortionK1>0.0</distortionK1>
                    <distortionK2>0.0</distortionK2>
                    <distortionK3>0.0</distortionK3>
                    <distortionT1>0.0</distortionT1>
                    <distortionT2>0.0</distortionT2>
                </plugin>
            </sensor>
        </gazebo>

    </xacro:macro>
</robot>
```
<ul>
<li> <sensor\>标签：描述传感器</li> 
 type:传感器类型,camera<br>
 name:摄像头命名,自由设置<br>
<li> <camera\>标签：描述摄像头参数,包括分辨率,编码格式,图像范围,噪音参数等</li>
<li> <plugin\>标签：加载摄像头仿真插件(libgazebo_ros_camera.so),设置插件的命名空间,发布图像的话题'参考坐标系等</li>
</ul>
```bash
#启动仿真环境
roslaunch mbot_gazebo view_mbot_with_camera_gazebo.launch
#查看摄像头仿真图像
rqt_image_view
```


<p>RGB-D摄像头仿真(kinect)</p>
实例(kinect_gazebo.xacro)如下:
```xml
<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="kinect_camera">

    <xacro:macro name="kinect_camera" params="prefix:=camera">
        <!-- Create kinect reference frame -->
        <!-- Add mesh for kinect -->
        <link name="${prefix}_link">
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <visual>
                <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
                <geometry>
                    <mesh filename="package://mbot_description/meshes/kinect.dae" />
                </geometry>
            </visual>
            <collision>
                <geometry>
                    <box size="0.07 0.3 0.09"/>
                </geometry>
            </collision>
        </link>

        <joint name="${prefix}_optical_joint" type="fixed">
            <origin xyz="0 0 0" rpy="-1.5708 0 -1.5708"/>
            <parent link="${prefix}_link"/>
            <child link="${prefix}_frame_optical"/>
        </joint>

        <link name="${prefix}_frame_optical"/>

        <gazebo reference="${prefix}_link">
            <sensor type="depth" name="${prefix}">
                <always_on>true</always_on>
                <update_rate>20.0</update_rate>
                <camera>
                    <horizontal_fov>${60.0*M_PI/180.0}</horizontal_fov>
                    <image>
                        <format>R8G8B8</format>
                        <width>640</width>
                        <height>480</height>
                    </image>
                    <clip>
                        <near>0.05</near>
                        <far>8.0</far>
                    </clip>
                </camera>
                <plugin name="kinect_${prefix}_controller" filename="libgazebo_ros_openni_kinect.so">
                    <cameraName>${prefix}</cameraName>
                    <alwaysOn>true</alwaysOn>
                    <updateRate>10</updateRate>
                    <imageTopicName>rgb/image_raw</imageTopicName>
                    <depthImageTopicName>depth/image_raw</depthImageTopicName>
                    <pointCloudTopicName>depth/points</pointCloudTopicName>
                    <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
                    <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
                    <frameName>${prefix}_frame_optical</frameName>
                    <baseline>0.1</baseline>
                    <distortion_k1>0.0</distortion_k1>
                    <distortion_k2>0.0</distortion_k2>
                    <distortion_k3>0.0</distortion_k3>
                    <distortion_t1>0.0</distortion_t1>
                    <distortion_t2>0.0</distortion_t2>
                    <pointCloudCutoff>0.4</pointCloudCutoff>
                </plugin>
            </sensor>
        </gazebo>

    </xacro:macro>
</robot>
```

```bash
#启动仿真环境
roslaunch mbot_gazebo view_mbot_with_kinect_gazebo.launch
#在rviz中查看kinect信息
rosrun rviz rviz
```

<p>激光雷达仿真</p>
实例(lidar_gazebo.xacro)如下:
```xml
<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="laser">

    <xacro:macro name="rplidar" params="prefix:=laser">
        <!-- Create laser reference frame -->
        <link name="${prefix}_link">
            <inertial>
                <mass value="0.1" />
                <origin xyz="0 0 0" />
                <inertia ixx="0.01" ixy="0.0" ixz="0.0"
                         iyy="0.01" iyz="0.0"
                         izz="0.01" />
            </inertial>

            <visual>
                <origin xyz=" 0 0 0 " rpy="0 0 0" />
                <geometry>
                    <cylinder length="0.05" radius="0.05"/>
                </geometry>
                <material name="black"/>
            </visual>

            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
                <geometry>
                    <cylinder length="0.06" radius="0.05"/>
                </geometry>
            </collision>
        </link>
        <gazebo reference="${prefix}_link">
            <material>Gazebo/Black</material>
        </gazebo>

        <gazebo reference="${prefix}_link">
            <sensor type="ray" name="rplidar">
                <pose>0 0 0 0 0 0</pose>
                <visualize>false</visualize>
                <update_rate>5.5</update_rate>
                <ray>
                    <scan>
                      <horizontal>
                        <samples>360</samples>
                        <resolution>1</resolution>
                        <min_angle>-3</min_angle>
                        <max_angle>3</max_angle>
                      </horizontal>
                    </scan>
                    <range>
                      <min>0.10</min>
                      <max>6.0</max>
                      <resolution>0.01</resolution>
                    </range>
                    <noise>
                      <type>gaussian</type>
                      <mean>0.0</mean>
                      <stddev>0.01</stddev>
                    </noise>
                </ray>
                <plugin name="gazebo_rplidar" filename="libgazebo_ros_laser.so">
                    <topicName>/scan</topicName>
                    <frameName>laser_link</frameName>
                </plugin>
            </sensor>
        </gazebo>

    </xacro:macro>
</robot>
```

```bash
#启动仿真环境
roslaunch mbot_gazebo view_mbot_with_laser_gazebo.launch
#在rviz中查看kinect信息
rosrun rviz rviz
```

*************************